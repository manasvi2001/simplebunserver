"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleHtml = void 0;
const stream_1 = require("stream");
const utils_1 = require("./utils");
function handleHtml(value, options, hasContentType) {
    // Only use promises if value is a promise itself
    if (value instanceof Promise) {
        return value.then((v) => handleHtml(v, options, hasContentType));
    }
    // Simple string use cases
    if (typeof value === 'string') {
        if (options.autoDoctype &&
            (0, utils_1.isHtml)(value) &&
            // Avoids double adding !doctype or adding to non root html tags.
            (0, utils_1.isTagHtml)(value))
            value = '<!doctype html>' + value;
        return new Response(value, hasContentType
            ? undefined
            : { headers: { 'content-type': options.contentType } });
    }
    // Stream use cases
    let stream = stream_1.Readable.toWeb(value);
    // We can convert to a readable stream with StreamTransform
    if (options.autoDoctype) {
        let first = true;
        stream = stream.pipeThrough(new TransformStream({
            transform(chunk, controller) {
                let str = chunk.toString();
                if (first &&
                    (0, utils_1.isTagHtml)(str) &&
                    // Avoids double adding !doctype or adding to non root html tags.
                    (0, utils_1.isTagHtml)(str)) {
                    first = false;
                    str = '<!doctype html>' + str;
                }
                controller.enqueue(str);
            }
        }));
    }
    return new Response(stream, hasContentType
        ? undefined
        : { headers: { 'content-type': options.contentType } });
}
exports.handleHtml = handleHtml;
