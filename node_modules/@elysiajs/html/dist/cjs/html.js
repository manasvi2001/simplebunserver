"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.html = void 0;
const elysia_1 = require("elysia");
const node_stream_1 = require("node:stream");
const suspense_1 = require("@kitajs/html/suspense");
const handler_1 = require("./handler");
const utils_1 = require("./utils");
function html(options = {}) {
    // Defaults
    options.contentType ??= 'text/html; charset=utf8';
    options.autoDetect ??= true;
    options.isHtml ??= utils_1.isHtml;
    options.autoDoctype ??= true;
    const instance = new elysia_1.Elysia({
        name: '@elysiajs/html',
        seed: options
    }).derive({ as: 'global' }, ({ set }) => {
        return {
            html(value) {
                return (0, handler_1.handleHtml)(value, options, 'content-type' in set.headers);
            },
            stream(value, args) {
                return (0, handler_1.handleHtml)((0, suspense_1.renderToStream)((id) => value({ ...args, id })), options, 'content-type' in set.headers);
            }
        };
    });
    if (options.autoDetect)
        return instance.mapResponse({ as: 'global' }, async function handlerPossibleHtml({ response: value, set }) {
            if (
            // Simple html string
            (0, utils_1.isHtml)(value) ||
                // @kitajs/html stream
                (value instanceof node_stream_1.Readable && 'rid' in value)) {
                const response = await (0, handler_1.handleHtml)(value, options, 'content-type' in set.headers);
                if (response instanceof Response)
                    return response;
                set.headers['content-type'] = options.contentType;
                return new Response(response);
            }
            return undefined;
        });
    return instance;
}
exports.html = html;
